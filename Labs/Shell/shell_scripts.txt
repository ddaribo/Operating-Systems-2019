-- 05-a-2000

Сменете вашия prompt с нещо по желание. После върнете оригиналния обратно.

http://www.linfo.org/prompt.html

$ PS1 - displays pattern of current prompt

PS1="[\u \u @ \h \W]\$"

-- 05-a-2100

Редактирайте вашия .bash_profile файл, за да ви поздравява (или да изпълнява някаква команда по ваш избор) всеки път, когато влезете в системата.

vi .bash_profile

echo "Welcome, $(whoami)!"

-- 05-a-2200

Направете си ваш псевдоним (alias) на полезна команда.

alias 'findme=grep 62172'

-- 05-a-4000

Напишете shell script (който ще използвате от вашия линукс), който да приема параметър име на файл, който искате да копирате от os-server и да го копира в текущата директория (на вашия линукс).
Пример за употреба:

# сваля /etc/passwd от os-server на вашия линукс
./get_remote_file /etc/passwd

scp s62172@os-server:/etc/passwd ~

s62172@os-server's password: 
passwd                                        100%   31KB   2.9MB/s   00:00  

-- 05-b-2000

Да се напише shell скрипт, който приканва потребителя да въведе име (низ) и изпечатва "Hello, името".

#!/bin/bash

echo Enter your name:

read name

echo Hello, ${name}!           

-- 05-b-2800

Да се напише shell скрипт, който проверява дали подаденият му параметър се състои само от букви и цифри.

#!/bin/bash

regex="^([[:alnum:]])*$"

if [[ "$1" =~ $regex ]] ;
then
        echo String is made of only letters and numbers;
else
        echo String contains characters other than letters and numbers;
fi


-- 05-b-3000

Да се напише shell скрипт, който извежда на стандартния изход факултетния номер на потребителя, който изпълнява скрипта, или казва "DANGER! It's a teacher!", ако потребителското име не е факултетен номер.

#!/bin/bash

fn="^([0-9]){5,6}$"

if [[ "$USER" =~ $fn ]] ;
then
        echo "$USER" ;
else
        echo "DANGER! It's a teacher";
fi


-- 05-b-3100 

Да се напише shell скрипт, който приканва потребителя да въведе низ - потребителско име на потребител от системата - след което извежда на стандартния изход колко пъти потребителят се е логнал.

last, lastb - show a listing of last logged in users

last | cut -d ' ' -f1 | sort | uniq -c | sort

broi gi or nachalotot na april


-- 05-b-3200 ??

Да се напише shell скрипт, който приканва потребителя да въведе пълното име на директория и извежда на стандартния изход подходящо съобщение за броя на всички файлове и директории в нея.

including hidden files ?

#!/bin/bash

echo Enter a directory name:

read dir

echo "Number of directories in ${dir}:"

find ${dir} -mindepth 1 -maxdepth 1 -type d | wc -l

echo "Number of files in ${dir}:"

find ${dir} -mindepth 1 -maxdepth 1 -type f | wc -l
~                                                    


-- 05-b-3300

Да се напише shell скрипт, който чете от стандартния вход имената на 3 файла, обединява редовете на първите два, подрежда ги по азбучен ред и резултата записва в третия файл.

да чете от стдин означава ли имената да са подадени през pipe ? или като read ? или параметри?

-> значи read!

#!/bin/bash

read file1 file2 file3

paste -d '\n' ${file1} ${file2} | sort > ${file3}


-- 05-b-3400

Да се напише shell скрипт, който чете от стандартния вход име на файл и символен низ, проверява дали низа се съдържа във файла и извежда на стандартния изход кода на завършване на командата.

#!/bin/bash

read filename string

cat ${filename} | grep ${string}

## echo $? ##

[ $? -eq 0 ] && echo "command code: $? - ${string} is found in ${filename}" || echo "command code: $? - ${string} is not found in ${filename}"


-- 05-b-4200 ???

Имате компилируем (a.k.a няма синтактични грешки) source file на езика C. Напишете shell script, който да покзва колко е дълбоко най-дълбокото nest-ване (влагане). По-лесно ли щеше да е за файл с Python код?
Примерен .c файл:

#include <stdio.h>

int main(int argc, char *argv[]) {
	
	if (argc == 1) {
		printf("There is only 1 argument");
	} else {
		printf("There are more than 1 arguments");
	}
	
	return 0;
}
Тук влагането е 2, понеже имаме main блок, а вътре в него if блок.

Примерно извикване на скрипта:

./count_nesting sum_c_code.c

Изход:
The deepest nesting is 2 levels

-- 05-b-4300 

Напишете shell script, който по подаден като аргумент файл с map между <nickname> -> <реален username в os-server> и nickname, ще ви улесни да изпращате съобщения на хората.

Пример за файл указател:
tinko	s61966
minko	s881234
ginko	s62000
dinko	s77777
senpai	velin

Примерно извикване на програмата:
./send_message myAddressBook dinko

И вече може да изпращате съобщения на човека с username s77777


#!/bin/bash

echo "enter name"
read name

username=$(cat ~/myAddressBook.txt | grep ${name} | cut -d ' ' -f2)
write ${username}
~                       

-- 05-b-4301

Напишете shell script, който автоматично да попълва файла указател от предната задача по подадени аргументи: име на файла указател, пълно име на човека (това, което очакваме да е в /etc/passwd) и избран за него nickname.
Файлът указател нека да е във формат:
<nickname, който лесно да запомните> <username в os-server>
// може да сложите и друг delimiter вместо интервал

Примерно извикване:
./pupulate_address_book myAddressBook "Ben Dover" uncleBen

Добавя към myAddressBook entry-то:
uncleBen <username на Ben Dover в os-server>

If a parameter has spaces, we need to quote it!
NO SPACES WHEN ASSIGNING A VARIABLE usr=sth !!!!


#!/bin/bash

usr=$(cat ~/05/passwd | grep "${2}" | cut -d ':' -f1)

echo ${3} ${usr} >> ${1}
~                         

***Бонус: Ако има няколко съвпадения за въведеното име (напр. има 10 човека Ivan Petrov в /etc/passwd), всички те да се показват на потребителя, заедно с пореден номер >=1,
след което той да може да въведе някой от номерата (или 0 ако не си хареса никого), и само избраният да бъде добавен към указателя.

#!/bin/bash

numofresults=$(cat ~/05/passwd | grep "${2}" | wc -l)

if [[ ${numofresults} == 1 ]] ; then
        usr=$(cat ~/05/passwd | grep "${2}" | cut -d ':' -f1) ;
elif [[ ${numofresults} == 0 ]] ; then
        exit 1;
else
        cat ~/05/passwd | grep "${2}" | cat -n | tr -d ' ' | tr '\t' ' '
        echo Enter a number for the person you want to add, or 0 for noone:
        read num
        if [[ ${num} != 0 ]] ; then
        usr=$(cat ~/05/passwd | grep "${2}" | cat -n | tr -d ' ' | tr '\t' ' ' | grep "${num} " | cut -d ' ' -f2 | cut -d ':' -f1) ;
        else
                exit 1;
fi
fi

echo ${3} ${usr} >> ${1}

~                              

-- 05-b-4400 ???

Напишете shell script, който да приема параметър име на директория и опционално експлицитно име на архив. Скриптът да създаде .tar.gz архив в подадената директория със съдържание променените преди по-малко от 45 мин файлове/директории. При експлицитно подадено име на архив - архивът е с това име, в противен случай архивът да получава име днешна дата във формат, който си изберете.


Note that find will call the -exec action for every single file it finds.

If you run tar -cvf file.tar {} for every single file find outputs, this means you'll overwrite file.tar every time, which explains why you end up with one archive left that only contains anaconda.storage.log — it's the last file find outputs.

Now, you actually want to append the files to the archive instead of creating it each time (this is what the -c option does). So, use the following:

find var/log/ -iname "anaconda.*" -exec tar -rvf file.tar {} \;

The -r option appends to the archive instead of recreating it every time.

tar -czf ~/backup-archive.tar.gz ~/backup/

The -z option in this command compresses the archive using gzip, which is a common practice when creating “tar files”.

THE changed files/directories WHERE?

#!/bin/bash

archname=`date '+%d-%m-%Y'`

if [[ $# -eq 1 ]] ; then
        find -mmin -45
        find -mmin -45 -exec tar -rf  ${1}/${archname}.tar {} \;
        xz ${1}/${archname}.tar
else
        find -mmin -45 -exec tar -rf ${1}/${2}.tar {} \;
        xz ${1}/${2}.tar
fi
~   

имам проблем с намирането на тези файлове! -> много голям output за цялата система? изобщо май връща всички файлове, а не само променените преди 45 мин??? иначе в терминала си работи?? 

-- 05-b-4500

Да се напише shell скрипт, който получава при стартиране като параметър в командния ред идентификатор на потребител. Скриптът периодично (sleep(1)) да проверява дали потребителят е log-нат, и ако да - да прекратява изпълнението си, извеждайки на стандартния изход подходящо съобщение.

#!/bin/bash

if [[ $(who | grep "${1}" | wc -l) -eq 1 ]] ; then
                echo "User ${1} is logged in"
                exit 0
fi

while [[ $(who | grep "${1}" | wc -l) -eq 0 ]]
do
        sleep 1

        if [[ $(who | grep "${1}" | wc -l) -eq 1 ]] ; then
                echo "User ${1} is logged in"
                break
        fi
done


-- 05-b-4600

Да се напише shell скрипт, който валидира дали дадено цяло число попада в целочислен интервал.
Скриптът приема 3 аргумента: числото, което трябва да се провери; лява граница на интервала; дясна граница на интервала.
Скриптът да връща exit status:
- 3, когато поне един от трите аргумента не е цяло число
- 2, когато границите на интервала са обърнати
- 1, когато числото не попада в интервала
- 0, когато числото попада в интервала

Примери:
$ ./validint.sh -42 0 102; echo $?
0

$ ./validint.sh 88 94 280; echo $?
1

$ ./validint.sh 32 42 0; echo $?
2

$ ./validint.sh asdf - 280; echo $?
3

-> проверката става с регекс

#!/bin/bash

if [[ "$1" =~ ^[^0-9]*$ || "$2" =~ ^[^0-9]*$ || "$3" =~ ^[^0-9]*$ ]] ; then
        exit 3

elif [[ $2 -gt $3 ]] ; then
        exit 2

elif [[ ( $1 -lt $2 ) || ( $1 -gt $3 ) ]] ; then
        exit 1

elif [[ ( $1 -gt $2 ) || ( $1 -lt $3 ) ]] ; then
        exit 0
fi


-- 05-b-4700

Да се напише shell скрипт, който форматира големи числа, за да са по-лесни за четене.
Като пръв аргумент на скрипта се подава цяло число.
Като втори незадължителен аргумент се подава разделител. По подразбиране цифрите се разделят с празен интервал.

Примери:
$ ./nicenumber.sh 1889734853
1 889 734 853

$ ./nicenumber.sh 7632223 ,
7,632,223


  rev - reverse lines characterwise

The
    	 replacement may contain the special character & to refer to that
              portion  of  the  pattern  space  which matched, and the special
              escapes \1 through \9 to refer  to  the  corresponding  matching
              sub-expressions in the regexp.


#!/bin/bash

revnum=$(echo "${1}" | rev)

if [[ -n $2 ]] ; then
        echo "${revnum}" | sed 's/.\{3\}/&'$2'/g' | rev
else
        echo "${revnum}" | sed 's/.\{3\}/& /g' | rev
fi

sed 's/.\{3\}/& /g'

-> Явно .\{3\} мачва всеки 3-ти символ
-> Явно & реферира цели предишен мач
-> Явно от горната конструкция се разбира, че нещо трябва да се вмъкне, а не замени!
-> не може без да се ескейпнат { }!

& holds the value of regular expression which we are searching. 

    When record is read and regular expression get the match, & will hold the value of matched regular expression i.e. 123
    We have replace the matched regular expression with itself with concatenation of brackets.
 source: http://lagooko.blogspot.com/2016/01/how-to-use-in-sed-command-in-unixlinux.html
-> OK 

-- 05-b-4800
Да се напише shell скрипт, който приема файл и директория. Скриптът проверява в подадената директория и нейните под-директории дали съществува копие на подадения файл и отпечатва имената на намерените копия, ако съществуват такива.

md5sum -> ednakvo sudurjanie i razlichen inode number
md5sum output-va nqkolko koloni -> cut -d ' ' -f1 -> samo za hash-a
md5sum raboti samo varhu file-ove, ne direktorii!

-- 05-b-5500

Да се напише shell script, който генерира HTML таблица със студентите в os-server. Таблицата трябва да има:
- колони за факултетен номер, име, фамилия, специалност, курс и група
- заглавен ред с имената нa колоните

Пример:
$ ./passwd-to-html.sh > table.html
$ cat table.html

  <tr>
    <td>60309</td>
    <td>Dragan</td>
    <td>Petkanov</td>
    <td>SI</td>
    <td>4</td>
    <td>3</td>
  </tr>
  <tr>
    <td>81111</td>
    <td>Pencho</td>
    <td>Ivanov</td>
    <td>KN</td>
    <td>3</td>
    <td>8</td>
  </tr>
</table>

-> не съм се дооправила с различните видове записи, но като цяло работи

-- 05-b-6600 ??

Да се напише shell скрипт, който получава единствен аргумент директория и изтрива всички повтарящи се (по съдържание) файлове в дадената директория. Когато има няколко еднакви файла, да се остави само този, чието име е лексикографски преди имената на останалите дублирани файлове.

Примери:
$ ls .
f1 f2 f3 asdf asdf2
# asdf и asdf2 са еднакви по съдържание, но f1, f2, f3 са уникални

$ ./rmdup .
$ ls .
f1 f2 f3 asdf
# asdf2 е изтрит

  cmp - compare two files byte by byte
  diff - compare files line by line


touch $1/tempfiles.txt

for f in $(ls $1)
do
        name1=${f}
        echo "${name1}"
        for j in $(ls $1)
        do
                name2=${j}
                echo "${name2}"
                if [[ "${name1}" != "${name2}" ]] ; then
                        if [[ $(md5sum "$1${f}") -eq $(md5sum "$1${j}") ]] ; then --- nope
                                echo ${name1} >> $1/tempfiles.txt
                                echo ${name2} >> $1/tempfiles.txt
                        fi
                fi
        done
done

cat $1/tempfiles.txt | sort | tail -n +2


-- 05-b-6800 ??

Да се напише shell скрипт, който получава единствен аргумент директория и отпечатва списък с всички файлове и директории в нея (без скритите).
До името на всеки файл да седи размера му в байтове, а до името на всяка директория да седи броят на елементите в нея (общ брой на файловете и директориите, без скритите).

a) Добавете параметър -a, който указва на скрипта да проверява и скритите файлове и директории.

Пример:
$ ./list.sh .
asdf.txt (250 bytes)
Documents (15 entries)
empty (0 entries)
junk (1 entry)
karh-pishtov.txt (8995979 bytes)
scripts (10 entries)

-- 05-b-7000

Да се напише shell скрипт, който приема произволен брой аргументи - имена на файлове. Скриптът да прочита от стандартния вход символен низ и за всеки от зададените файлове извежда по подходящ начин на стандартния изход броя на редовете, които съдържат низа.

#!/bin/bash

for arg in "$@"
do
        echo "Enter word to search:"
        read word
        echo "Number of lines containing ${word}:"
        cat "${arg}" | grep "\<${word}\>" | wc -l
done                                                      

-- 05-b-7100

Да се напише shell скрипт, който приема два параметъра - име на директория и число. Скриптът да извежда на стандартния изход имената на всички обикновени файлове във директорията, които имат размер, по-голям от подаденото число.

#!/bin/bash

if [[ -d "$1" ]] ; then

        for f in "$1"/*
        do
                filesize=$(stat --printf="%s" "${f}")
                if [[ (-f "${f}") && ("${filesize}" -gt $2) ]] ; then
                        echo "${f}"
                fi
        done
fi

* за ~ ми се показва и един hidden file examples.desktop
a


-- 05-b-7200

Да се напише shell скрипт, който приема произволен брой аргументи - имена на файлове или директории. Скриптът да извежда за всеки аргумент подходящо съобщение:
	- дали е файл, който може да прочетем
	- ако е директория - имената на файловете в нея, които имат размер, по-малък от броя на файловете в директорията.

man test:

 -f FILE
              FILE exists and is a regular file
 -d FILE
              FILE exists and is a directory
-r FILE
              FILE exists and read permission is granted
-x FILE
              FILE exists and execute (or search) permission is granted


#!/bin/bash

for arg in "$@"
do
        if [[ -d "$arg" ]] ; then
        numoffiles=$(find . -maxdepth 1 -type f | wc -l)
        for f in "$arg"/*
        do
                filesize=$(stat --printf="%s" "${f}")
                if [[ "${filesize}" -lt "${numoffiles}" ]] ; then
                        echo "${f}"
                fi
        done
        fi
        
        if [[ -r "$arg" ]] ; then
                echo "${arg} is an existing and readable file."
        fi
done


-- 05-b-7500

Напишете shell script guess, която си намисля число, което вие трябва да познате. В зависимост от вашия отговор, програмата трябва да ви казва "надолу" или "нагоре", докато не познате числото. Когато го познаете, програмата да ви казва с колко опита сте успели.

./guess (програмата си намисля 5)

Guess? 22
...smaller!
Guess? 1
...bigger!
Guess? 4
...bigger!
Guess? 6
...smaller!
Guess? 5
RIGHT! Guessed 5 in 5 tries!
to
Hint: Един начин да направите рандъм число е с $(( (RANDOM % b) + a  )), което ще генерира число в интервала [a, b]. Може да вземете a и b като параметри, но не забравяйте да направите проверката.

#!/bin/bash

if [[ $# -ne 2 ]] ; then
        echo "Please, give two integers as limits for the interval for the number to be guessed!"
        exit 1
fi

if [[ $1 -gt $2 ]] ; then
        b=$1
        a=$2
else
        a=$1
        b=$2
fi

num=$(( (RANDOM % "${b}") + "${a}" ))
tries=1

echo "Guess the number! Enter your guess:"
read guess

if [[ "${guess}" -gt "${num}" ]] ; then
                echo "...smaller!"
        elif  [[ "${guess}" -lt "${num}" ]] ; then
                echo "...bigger!"
        elif [[ "${guess}" -eq "${num}" ]] ; then
                echo "RIGHT! Guessed ${num} in ${tries} tries"
                exit 1
fi


while [[ "${guess}" -ne "${num}" ]] ; do

        echo "Guess?"
        read guess

        if [[ "${guess}" -gt "${num}" ]] ; then
                echo "...smaller!"
        elif  [[ "${guess}" -lt "${num}" ]] ; then
                echo "...bigger!"
        elif [[ "${guess}" -eq "${num}" ]] ; then
                echo "RIGHT! Guessed ${num} in ${tries} tries"
        fi

        tries=$(( "${tries}" + 1 ))
done


-- 05-b-7550 ??

Да се напише shell скрипт, който приема параметър - име на потребител. Скриптът да прекратява изпълненито на всички текущо работещи процеси на дадения потребител, и да извежда колко са били те.

-- 05-b-7700

Да се напише shell скрипт, който приема два параметъра - име на директория и число. Скриптът да извежда сумата от размерите на файловете в директорията, които имат размер, по-голям от подаденото число.

#!/bin/bash

sum=0
count=0

for f in "$1"/* ; do
        size=$(stat --printf="%s" "${f}")
        if [[ "${size}" -gt $2 ]] ; then
                sum=$(( "${sum}" + "${size}" ))
                count=$(( "${count}" + 1 ))
                echo "${f}"
        fi
done

echo "${sum}"
echo "${count} files"


-- 05-b-7800

Да се напише shell скрипт, който намира броя на изпълнимите файлове в PATH.
Hint: Предполага се, че няма спейсове в имената на директориите
Hint2: Ако все пак искаме да се справим с този случай, да се разгледа IFS променливата и констуркцията while read -d

https://opensource.com/article/17/6/set-path-linux
https://stackoverflow.com/questions/44524190/iterate-over-path-variable-using-shell-script

#!/bin/bash

count=0

IFS=:
for p in $PATH ; do
        for f in "$p"/* ; do
                if [[ -x "${f}" ]] ; then
                        count=$(( "${count}" + 1 ))
                fi
        done
        echo "${count} executable files in ${p}"
done

друг начин??
#while read p ; do
#       echo "$p"
#done < <(echo $PATH:)

while read -d ':' p 
	do echo "${p}" 
done <<< $PATH:


работи само с двете точки след PATH 
~                          

-- 05-b-8000

Напишете shell script, който получава като единствен аргумент име на потребител и за всеки негов процес изписва съобщение за съотношението на RSS към VSZ. Съобщенията да са сортирани, като процесите с най-много заета виртуална памет са най-отгоре.

Hint:
Понеже в Bash няма аритметика с плаваща запетая, за смятането на съотношението използвайте командата bc. За да сметнем нампример 24/7, можем да: echo "scale=2; 24/7" | bc
Резултатът е 3.42 и има 2 знака след десетичната точка, защото scale=2.
Алтернативно, при липса на bc ползвайте awk.

RSS - Resident Set Size
VSZ - Virtual Memory Size#!/bin/bash

uid=$1

while read line ; do
        #rss=$(echo "${line}" | cut -d ' ' -f1)
        #vsz=$(echo "${line}" | cut -d ' ' -f2)
        #echo "scale=3; ${rss}/${vsz}" | bc
        echo "${line}" | awk '{printf "%s %.4f\n", $1,$2/$3}'
done < <(ps -u "${uid}" -o cmd=,rss=,vsz= --sort -vsz)


-- 05-b-9100

Опишете поредица от команди или напишете shell скрипт, които/който при известни две директории SOURCE и DESTINATION:
- намира уникалните "разширения" на всички файлове, намиращи се някъде под SOURCE. (За простота приемаме, че в имената на файловете може да се среща символът точка '.' максимум веднъж.)
- за всяко "разширение" създава по една поддиректория на DESTINATION със същото име
- разпределя спрямо "разширението" всички файлове от SOURCE в съответните поддиректории в DESTINATION

!
First of all you have to know that the default permission of directories in Ubuntu is 644 which means you can't create a file in a directory you are not the owner.
You can either change the permission of the directory and enable others to create files inside.

sudo chmod -R 777 ~/05

#!/bin/bash


while read line ; do
	mkdir $2/"${line}"
done < <(ls $1 a| grep -o '\..*' | sort | uniq | tr -d '.')

for file in $1/* ; do
	extension=$(echo "${file}" | grep -o '\..*' | tr -d '.')
	mv ${file} $2/${extension}/
done

main problem: ${file} представлява целият път на файла, не само името му!!!
basename , dirname!

-- 05-b-9200

Да се напише shell скрипт, който получава произволен брой аргументи файлове, които изтрива.
Ако бъде подадена празна директория, тя бива изтрита. Ако подадения файл е директория с поне 1 файл, тя не се изтрива.
За всеки изтрит файл (директория) скриптът добавя ред във log файл с подходящо съобщение.

а) Името на log файла да се чете от shell environment променлива, която сте конфигурирали във вашия .bashrc.
б) Добавете параметър -r на скрипта, който позволява да се изтриват непразни директории рекурсивно.
в) Добавете timestamp на log съобщенията във формата: 2018-05-01 22:51:36

Примери:
$ export RMLOG_FILE=~/logs/remove.log
$ ./rmlog -r f1 f2 f3 mydir/ emptydir/
$ cat $RMLOG_FILE
[2018-04-01 13:12:00] Removed file f1
[2018-04-01 13:12:00] Removed file f2
[2018-04-01 13:12:00] Removed file f3
[2018-04-01 13:12:00] Removed directory recursively mydir/
[2018-04-01 13:12:00] Removed directory emptydir/

-- 05-b-9500

(Цветно принтиране) Напишете shell script color_print, който взима два параметъра.

Първият може да е измежду "-r", "-g" "-b", а вторият е произволен string.
На командата "echo" може да се подаде код на цвят, който ще оцвети текста в определения цвят.
В зависимост от първия аргумент, изпринтете втория аргумен в определения цвят:

"-r" е червено. Кодът на червеното е '\033[0;31m' (echo -e "\033[0;31m This is red")
"-g" е зелено. Кодът на зеленото е '\033[0;32m' (echo -e "\033[0;32m This is green")
"-b" е синьо. Кодът на синьото е '\033[0;34m' (echo -e "\033[0;34m This is blue")
Ако е подадена друга буква изпишете "Unknown colour", а ако изобщо не е подаден аргумент за цвят, просто изпишете текста.

Hint:

В края на скрипта си напишете:
echo '\033[0m'
,за да не се прецакат цветовете на терминала. Това е цветът на "няма цвят".

#!/bin/bash

if [[ ($# -eq 1) && !($1 =~ -[a-z] ) ]] ; then
        echo "$1"
        echo '\033[0m'
        exit 1
elif [[ ($# -eq 1) && ($1 =~ -[a-z] ) ]] ; then
        echo "You must specify word to print!"
        echo '\033[0m'
        exit 1
fi

case "$1" in
        "-r")
                echo -e "\033[0;31m $2"
                 ;;
         "-g")
                  echo -e "\033[0;32m $2"
                  ;;
          "-b")
                   echo -e "\033[0;34m $2"
                   ;;
           *)
                   echo "Unknown colour"
   esac

echo '\033[0m'
~   

това не работи (нито с [[ ]] ) : .. Проработи когато добавих спейсове == 
if [ "$1" == "-r" ] ; then
        echo -e "\033[0;31m $2"
elif [ "$1" == "-g" ] ; then
         echo -e "\033[0;32m $2"
elif [ "$1" == "-b" ] ; then
         echo -e "\033[0;34m $2"
elif [ $1 =~  -[^rgb] ] ; then
        echo "Unkown colour"
else
        echo $1
fi

            
-- 05-b-9501

Този път програмата ви ще приема само един параметър, който е измежду ("-r", "-b", "-g", "-x").
Напишете shell script, който приема редовете от stdin и ги изпринтва всеки ред с редуващ се цвят. Цветовете вървят RED-GREEN-BLUE и цветът на първия ред се определя от аргумента.
 Ако е подаден аргумент "-x", то не трябва да променяте цветовете в терминала (т.е., все едно сте извикали командата cat).

Hint: Не забравяйте да връщате цветовете в терминала.

-- 05-b-9600

Да се напише shell скрипт, който получава произволен брой аргументи файлове, които изтрива.
Ако бъде подадена празна директория, тя бива изтрита. Ако подадения файл е директория с поне 1 файл, тя не се изтрива.

Да се дефинира променлива BACKUP_DIR (или друго име), в която:
- изтритите файлове се компресират и запазват
- изтритите директории се архивират, комприсират и запазват
- имената на файловете е "filename_yyyy-mm-dd-HH-MM-SS.{gz,tgz}", където filename е оригиналното име на файла (директорията) преди да бъде изтрит

а) Добавете параметър -r на скрипта, който позволява да се изтриват непразни директории рекурсивно и съответно да се запазят в BACKUP_DIR

Примери:
$ export BACKUP_DIR=~/.backup/

# full-dir/ има файлове и не може да бъде изтрита без параметър -r
$ ./trash f1 f2 full-dir/ empty-dir/
error: full-dir/ is not empty, will not detele
$ ls $BACKUP_DIR
f1_2018-05-07-18-04-36.gz
f2_2018-05-07-18-04-36.gz
empty-dir_2018-05-07-18-04-36.tgz

$ ./trash -r full-dir/

$ ls $BACKUP_DIR
f1_2018-05-07-18-04-36.gz
f2_2018-05-07-18-04-36.gz
full-dir_2018-05-07-18-04-50.tgz
empty-dir_2018-05-07-18-04-36.tgz

# можем да имаме няколко изтрити файла, които се казват по един и същ начин
$ ./trash somedir/f1

$ ls $BACKUP_DIR
f1_2018-05-07-18-04-36.gz
f1_2018-05-07-18-06-01.gz
f2_2018-05-07-18-04-36.gz
full-dir_2018-05-07-18-04-50.tgz
empty-dir_2018-05-07-18-04-36.tgz

-- 05-b-9601

Да се напише shell скрипт, който възстановява изтрити файлове, които имат запазено копие в BACKUP_DIR (от предната задача).
При възстановяването файловете да се декомпресират, а директориите да се декомпресират и разархивират.

а) Да се дефинира параметър -l, който изрежда всички файлове, които могат да бъдат възстановени и датата на тяхното изтриване.

б) Скриптът да приема 2 параметъра. Първият е името на файла, който да се възстанови, а вторията е директорията, в която файлът да бъде възстановен. Ако вторият аргумент липсва, файлът да се възстановява в сегашната директория, където скриптът се изпълнява.

в) Когато има N > 1 запазени файла със същото име, да се изпише списък с N реда на потребителя и да се изиска той да въведе цяло число от 1 до N, за да избере кой файл да възстанови.

Примери:
# BACKUP_DIR трябва да е дефинирана преди използването на скрипта
$ echo $BACKUP_DIR
~/.backup

$ ./restore.sh -l
f1  (2018/05/07 18:04:36)
f1  (2018/05/07 18:06:01)
f2  (2018/05/07 18:04:36)
full-dir    (2018/05/07 18:04:50)
empty-dir   (2018/05/07 18:04:36)

$ ls restored-dir/
# възстановяване на файл в подадена директория
$ ./restore.sh f2 target-dir/
$ ls restored-dir/
f2

# възстановяване на дублиран файл в сегашната директория
$ ./restore.sh f1
(1) f1  (2018/05/07 18:04:36)
(2) f1  (2018/05/07 18:06:01)
choose file (1, 2):
# потребителят въвежда 2

$ ls
f1

$ ./restore.sh -l
f1  (2018/05/07 18:04:36)
full-dir    (2018/05/07 18:04:50)
empty-dir   (2018/05/07 18:04:36)

# възстановяване на директория в сегашната директория
$ ./restore.sh full-dir
$ ls
f1  full-dir/

